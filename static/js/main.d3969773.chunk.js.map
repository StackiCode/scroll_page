{"version":3,"sources":["components/Comp1.js","components/Comp2.js","components/Comp3.js","section/Section1.js","App.js","serviceWorker.js","index.js"],"names":["Comp1","props","clssSec","anmclss","className","Comp2","Comp3","Section1","state","anmclass1","anmclass2","anmclass3","updateScroll","scr_pos","window","pageYOffset","setState","console","log","addEventListener","this","Component","App","Boolean","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAceA,EAZD,SAACC,GACX,IAAMC,EAAO,oBAAgBD,EAAME,SAGnC,OACI,yBAAKC,UAAWF,GACd,yBAAKE,UAJE,aAIkB,yBAAKA,UAHxB,mBAG2C,+CCU5CC,EAfD,SAACJ,GACX,IAAMC,EAAO,oBAAgBD,EAAME,SAGnC,OACI,yBAAKC,UAAWF,GACZ,yBAAKE,UAJA,aAKD,yBAAKA,UAJL,mBAKI,+CCOLE,EAfD,SAACL,GACX,IAAMC,EAAO,oBAAgBD,EAAME,SAGnC,OACI,yBAAKC,UAAWF,GACZ,yBAAKE,UAJA,aAKD,yBAAKA,UAJL,mBAKI,oDCsCLG,E,4MA3CXC,MAAQ,CACJC,UAAW,GACXC,UAAW,GACXC,UAAW,I,EAKfC,aAAe,WACX,IAAIC,EAAUC,OAAOC,YAClBF,GAAW,IACV,EAAKG,SAAS,CAACP,UAAW,eAEnBI,EAAU,KAAOA,GAAW,IAEnC,EAAKG,SAAS,CAACN,UAAW,eAEpBG,EAAU,KAAOA,GAAW,IAElC,EAAKG,SAAS,CAACL,UAAW,eAGpBE,EAAU,KAAOA,GAAW,KAElC,EAAKG,SAAS,CAACP,UAAW,GACXC,UAAW,GACXC,UAAW,KAG5BM,QAAQC,IAAIL,I,kEAvBdC,OAAOK,iBAAiB,SAAUC,KAAKR,gB,+BA2BvC,OACI,6BACI,kBAAC,EAAD,CAAOT,QAASiB,KAAKZ,MAAMC,YAC3B,kBAAC,EAAD,CAAON,QAASiB,KAAKZ,MAAME,YAC3B,kBAAC,EAAD,CAAOP,QAASiB,KAAKZ,MAAMG,iB,GAtCpBU,aCSRC,G,6KARX,OACE,6BACE,kBAAC,EAAD,W,GAJUD,cCQEE,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAM,kBAAC,EAAD,MAEZC,IAASC,OAAQF,EAAKG,SAASC,eAAe,SD2HxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.d3969773.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Comp1 = (props) => {\r\n    const clssSec = `sec sec_1 ${props.anmclss}`;\r\n    const clssDis = `dis dis_1`;\r\n    const clssHd = `header header_1`; \r\n    return (\r\n        <div className={clssSec}>\r\n          <div className={clssDis}><div className={clssHd}><h1>NEW FEATURE</h1></div>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Comp1;","import React from 'react';\r\n\r\n\r\nconst Comp2 = (props) => {\r\n    const clssSec = `sec sec_2 ${props.anmclss}`;\r\n    const clssDis = `dis dis_2`;\r\n    const clssHd = `header header_2`; \r\n    return (\r\n        <div className={clssSec}>\r\n            <div className={clssDis}>\r\n                <div className={clssHd}>\r\n                    <h1>MULTI MEDIA</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Comp2;","import React from 'react';\r\n\r\n\r\nconst Comp3 = (props) => {\r\n    const clssSec = `sec sec_3 ${props.anmclss}`;\r\n    const clssDis = `dis dis_3`;\r\n    const clssHd = `header header_3`;\r\n    return (\r\n        <div className={clssSec}>\r\n            <div className={clssDis}>\r\n                <div className={clssHd}>\r\n                    <h1>FLEXIBLE PACKAGE</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Comp3;","import React, { Component } from 'react';\r\nimport Comp1 from '../components/Comp1';\r\nimport Comp2 from '../components/Comp2';\r\nimport Comp3 from '../components/Comp3';\r\n\r\nclass Section1 extends Component {\r\n    state = {\r\n        anmclass1: \"\",\r\n        anmclass2: \"\",\r\n        anmclass3: \"\"\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.updateScroll);\r\n    }\r\n    updateScroll = () => {\r\n        var scr_pos = window.pageYOffset;\r\n        if(scr_pos <= 350) {\r\n            this.setState({anmclass1: \"anm_appear\"});\r\n          } \r\n          else if( scr_pos > 350 && scr_pos <= 650) \r\n          {\r\n            this.setState({anmclass2: \"anm_appear\"});\r\n          }\r\n          else if(scr_pos > 650 && scr_pos <= 680) \r\n          {\r\n            this.setState({anmclass3: \"anm_appear\"});\r\n\r\n          } \r\n          else if(scr_pos > 680 && scr_pos <= 900) \r\n          {          \r\n            this.setState({anmclass1: \"\",\r\n                           anmclass2: \"\",\r\n                           anmclass3: \"\"\r\n        });\r\n          }\r\n          console.log(scr_pos);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Comp1 anmclss={this.state.anmclass1}/>\r\n                <Comp2 anmclss={this.state.anmclass2}/>\r\n                <Comp3 anmclss={this.state.anmclass3}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Section1;","import React, { Component } from 'react';\nimport Section1 from './section/Section1';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Section1/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = <App/>;\n\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}